env:
    SQLITE_PAGE: https://sqlite.org
    OUTPUT_FILES: sqlite3.c sqlite3.h sqlite3ext.h shell.c
    WORKFLOWS: build_linux_x64.yml build_windows_x64.yml
 
name: Generate Amalgamation

on:
    workflow_dispatch:
        inputs:
#    schedule:
#        - cron: '30 3 * * 1' # run at 3:30 AM UTC every Monday
 
jobs:
    build:
        runs-on: ubuntu-20.04

        steps:
            - name: Check latest version
              shell: bash
              run: |
                curl -s https://sqlite.org/download.html > download.html
                SQLITE_SRC_ZIP=$(cat download.html | grep -o 'sqlite-src-[0-9]*\.zip' | head -1)
                SQLITE_URL=${{ env.SQLITE_PAGE }}/$(cat download.html | grep -o '[0-9]*\/sqlite-src-[0-9]*\.zip' | head -1)
                INT_VER=$(echo $SQLITE_SRC_ZIP | grep -o '[0-9]*')
                OUTPUT_DIR=sqlite-amalgamation-$INT_VER
                
                NUM0=${INT_VER:0:1}
                NUM1=${INT_VER:1:2}
                NUM2=${INT_VER:3:2}
                NUM3=${INT_VER:5:2}
                NUM1=$((10#$NUM1))
                NUM2=$((10#$NUM2))
                NUM3=$((10#$NUM3))
                SQLITE_VERSION="$NUM0.$NUM1.$NUM2"
                if [ $NUM3 -ne 0 ]; then
                    SQLITE_VERSION="$SQLITE_VERSION.$NUM3"
                fi

                echo "Version INT: $INT_VER"
                echo "Version: $SQLITE_VERSION"
                echo "URL: $SQLITE_URL"
                
                echo "SQLITE_VERSION=$SQLITE_VERSION" >> $GITHUB_ENV
                echo "INT_VER=$INT_VER" >> $GITHUB_ENV
                echo "SQLITE_URL=$SQLITE_URL" >> $GITHUB_ENV
                echo "SQLITE_SRC_ZIP=$SQLITE_SRC_ZIP" >> $GITHUB_ENV
                echo "OUTPUT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV

            - name: Install prerequisities
              shell: bash
              run: |
                sudo apt install autoconf automake libtool

            - name: Build Amalgamation
              shell: bash
              run: |
                set -x
                curl -L ${{ env.SQLITE_URL }} -o ${{ env.SQLITE_SRC_ZIP }}
                unzip ${{ env.SQLITE_SRC_ZIP }}
                SRC_DIR=$(echo ${{ env.SQLITE_SRC_ZIP }} | grep -o 'sqlite-src-[0-9]*')
                echo "SRC_DIR=$SRC_DIR" >> $GITHUB_ENV
                
                cd $SRC_DIR
                ./configure --enable-fts3 --enable-all --enable-update-limit --disable-tcl
                make amalgamation-tarball
                
                mkdir ${{ env.OUTPUT_DIR }}
                cp ${{ env.OUTPUT_FILES }} ${{ env.OUTPUT_DIR }}/
                
            - name: Upload artifact
              uses: actions/upload-artifact@v4
              with:
                name: ${{ env.OUTPUT_DIR }}
                path: ${{ env.SRC_DIR }}/${{ env.OUTPUT_DIR }}

            - name: Trigger binary build workflows
              shell: bash
              run: |
                CHILD_CREATION_DT=$(date +%Y-%m-%dT%H:%M:%S)
                payload="{\"inputs\":{\"INT_VER\":\"${{ env.INT_VER }}\",\"PARENT_RUN_ID\":\"${{ github.run_id }}\"},\"ref\":\"main\"}"
                for wname in ${{ env.WORKFLOWS }}
                do
                    curl -L \
                      -X POST \
                      -H "Accept: application/vnd.github+json" \
                      -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      https://api.github.com/repos/pawelsalawa/sqlite3-sqls/actions/workflows/$wname/dispatches \
                      -d $payload
                done
                echo "CHILD_CREATION_DT=$CHILD_CREATION_DT" >> $GITHUB_ENV

            - name: Wait a bit for workflows creation
              shell: bash
              run: sleep 5
                
            - name: Wait for workflows to complete
              shell: bash
              run: |
                wid_list=()
                for wname in ${{ env.WORKFLOWS }}
                do
                    url=https://api.github.com/repos/pawelsalawa/sqlite3-sqls/actions/workflows/$wname/runs?created=\>${{ env.CHILD_CREATION_DT }}
                    echo "Querying workflow ID from URL: $url"
                    resp=$(
                            curl -s -L \
                              -H "Accept: application/vnd.github+json" \
                              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                              -H "X-GitHub-Api-Version: 2022-11-28" \
                              $url
                          )
                    id=$(echo $resp | jq '.workflow_runs[0].id')
                    echo "Workflow ID for workflow $wname: $id"
                    if [ "$id" == "null" ]
                    then
                        echo "Null workflow ID for $wname."
                        exit 1
                    fi
                    wid_list+=( $id )
                done
                echo "CHILD_IDS=\"${wid_list[@]}\"" >> $GITHUB_ENV
                
                echo "Workflow IDs to wait for: ${wid_list[@]}"
                success=0
                for wid in ${wid_list[@]}
                do
                    echo "Waiting for ID: $wid"
                    url=https://api.github.com/repos/pawelsalawa/sqlite3-sqls/actions/runs/$wid
                    it=1
                    total_it=20
                    status=""
                    while [ "$status" != "completed" ] && [ $it -le $total_it ]
                    do
                        echo "Iteration $it/$total_it..."
                        it=$((it + 1))

                        
                        resp=$(
                                curl -s -L \
                                  -H "Accept: application/vnd.github+json" \
                                  -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                                  -H "X-GitHub-Api-Version: 2022-11-28" \
                                  $url
                            )
                        echo "Response:"
                        echo $resp
                        status=$(echo $resp | jq -r '.status')
                        result=$(echo $resp | jq -r '.conclusion')
                        echo "Status: $status, result: $result"
                        if [ "$status" == "completed" ] && [ "$result" != "success" ]
                        then
                            echo "Child build has failed: $url"
                            exit 1
                        fi

                        if [ "$status" != "completed" ]
                        then
                            sleep 30
                        else
                            success=1
                        fi
                    done
                    
                    if [ $success -eq 1 ]
                    then
                        echo "Child build $url finished successfully."
                    else
                        echo "Child build $url failed."
                        exit 1
                    fi
                done
                
                echo "All child workflows finished successfully."

            - name: Create release
              shell: bash
              run: |
                echo "test: ${{ env.CHILD_IDS }}"
