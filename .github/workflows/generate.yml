env:
    SQLITE_PAGE: https://sqlite.org
    OUTPUT_FILES: sqlite3.c sqlite3.h sqlite3ext.h shell.c
    WORKFLOWS: build_linux_x64.yml build_linux_arm.yml build_windows_x64.yml build_windows_x86.yml build_macos_x64.yml build_macos_arm.yml
    BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
 
name: Generate Amalgamation

on:
    workflow_dispatch:
        inputs:
    schedule:
        - cron: '30 * * * *' # run every hour, half past an hour - if there is no release, the action is bery quick
 
jobs:
    build:
        runs-on: ubuntu-20.04

        steps:
            - name: Clone GH scripts
              uses: actions/checkout@v3
              with:
                repository: pawelsalawa/gh-action-scripts
                ref: main

            - name: Set environment variables for scripts
              run: |
                echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
                echo "TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV
                chmod +x scripts/*.sh
                echo "SCRIPTS=$(pwd)/scripts" >> $GITHUB_ENV

            - name: Check latest version
              shell: bash
              run: |
                curl -s https://sqlite.org/download.html > download.html
                SQLITE_SRC_ZIP=$(cat download.html | grep -o 'sqlite-src-[0-9]*\.zip' | head -1)
                SQLITE_URL=${{ env.SQLITE_PAGE }}/$(cat download.html | grep -o '[0-9]*\/sqlite-src-[0-9]*\.zip' | head -1)
                INT_VER=$(echo $SQLITE_SRC_ZIP | grep -o '[0-9]*')
                OUTPUT_DIR=sqlite3-amalgamation-$INT_VER
                EXT_OUTPUT_DIR=sqlite3-extensions-src-$INT_VER
                SQLITE_VERSION=$($SCRIPTS/convert_int_ver.sh $INT_VER)

                echo "Version INT: $INT_VER"
                echo "Version: $SQLITE_VERSION"
                echo "URL: $SQLITE_URL"
                
                echo "SQLITE_VERSION=$SQLITE_VERSION" >> $GITHUB_ENV
                echo "INT_VER=$INT_VER" >> $GITHUB_ENV
                echo "SQLITE_URL=$SQLITE_URL" >> $GITHUB_ENV
                echo "SQLITE_SRC_ZIP=$SQLITE_SRC_ZIP" >> $GITHUB_ENV
                echo "OUTPUT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV
                echo "EXT_OUTPUT_DIR=$EXT_OUTPUT_DIR" >> $GITHUB_ENV
                
            - name: Check for release existance
              shell: bash
              run: |
                aimed_name="v${{ env.SQLITE_VERSION }}"
                resp=$(curl -s -L https://api.github.com/repos/${{ github.repository }}/releases/tags/$aimed_name)
                result_name=$(echo $resp | jq -r '.name')
                if [ "$aimed_name" == "$result_name" ]
                then
                    echo "Release $aimed_name exists. Skipping the run."
                    echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
                else
                    echo "Release $aimed_name does not exists. Proceeding."
                    echo "RELEASE_EXISTS=false" >> $GITHUB_ENV
                fi

            - name: Install prerequisities
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              run: |
                sudo apt install autoconf automake libtool

            - name: Build Amalgamation
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              run: |
                set -x
                curl -L ${{ env.SQLITE_URL }} -o ${{ env.SQLITE_SRC_ZIP }}
                unzip ${{ env.SQLITE_SRC_ZIP }}
                SRC_DIR=$(echo ${{ env.SQLITE_SRC_ZIP }} | grep -o 'sqlite-src-[0-9]*')
                echo "SRC_DIR=$SRC_DIR" >> $GITHUB_ENV
                
                cd $SRC_DIR
                ./configure --enable-fts3 --enable-all --enable-update-limit --disable-tcl
                make amalgamation-tarball
                
                mkdir ${{ env.OUTPUT_DIR }}
                cp ${{ env.OUTPUT_FILES }} ${{ env.OUTPUT_DIR }}/
                
            - name: Upload Amalgamation artifact
              if: env.RELEASE_EXISTS == 'false'
              uses: actions/upload-artifact@v4
              with:
                name: ${{ env.OUTPUT_DIR }}
                path: ${{ env.SRC_DIR }}/${{ env.OUTPUT_DIR }}
                
            - name: Build extensions package
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              working-directory: ${{ env.SRC_DIR }}
              run: |
                mkdir ${{ env.EXT_OUTPUT_DIR }}
                cd ext
                cp -R * ../${{ env.EXT_OUTPUT_DIR }}/

            - name: Upload extensions artifact
              if: env.RELEASE_EXISTS == 'false'
              uses: actions/upload-artifact@v4
              with:
                name: ${{ env.EXT_OUTPUT_DIR }}
                path: ${{ env.SRC_DIR }}/${{ env.EXT_OUTPUT_DIR }}

            - name: Trigger binary build workflows
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              run: |
                run_ids=()
                inputs=$(
                    jq -c -n \
                        --arg intVer "${{ env.INT_VER }}" \
                        --arg parentRunId "${{ github.run_id }}" \
                        '{
                            "INT_VER": $intVer,
                            "PARENT_RUN_ID": $parentRunId
                        }'
                    )
                    
                for wname in ${{ env.WORKFLOWS }}
                do
                    run_id=$($SCRIPTS/run_workflow.sh $wname $inputs "main")
                    run_ids+=( $run_id )
                done
                echo "CHILD_IDS=${run_ids[@]}" >> $GITHUB_ENV

            - name: Wait for workflows to complete
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              run: |
                echo "Workflow IDs to wait for: $CHILD_IDS"
                success=0
                for runid in $CHILD_IDS
                do
                    success=$($SCRIPTS/wait_for_run.sh $runid 5)
                    if [ $success -eq 1 ]
                    then
                        echo "Child build $runid finished successfully."
                    else
                        echo "Child build $runid failed."
                        exit 1
                    fi
                done
                echo "All child workflows finished successfully."

            - name: Download created artifacts
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              run: |
                mkdir assets
                cd assets

                for runid in ${{ env.CHILD_IDS }}
                do
                    $SCRIPTS/download_artifact.sh $runid
                done
                
                echo "Downloaded files:"
                ls -l
            
            - name: Amalgamation archive for assets
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              run: |
                assets_dir=$(pwd)/assets
                cd ${{ env.SRC_DIR }}/${{ env.OUTPUT_DIR }}
                zip $assets_dir/${{ env.OUTPUT_DIR }}.zip *

                cd $assets_dir
                echo "Assets including amalgamation:"
                ls -l
                
            - name: Extensions archive for assets
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              run: |
                assets_dir=$(pwd)/assets
                cd ${{ env.SRC_DIR }}/${{ env.EXT_OUTPUT_DIR }}
                zip -r $assets_dir/${{ env.EXT_OUTPUT_DIR }}.zip *

                cd $assets_dir
                echo "Assets including extensions:"
                ls -l

            - name: Create release
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              working-directory: assets
              run: |
                body="Based on SQLite3 v$SQLITE_VERSION. Please find artifacts for download below."
                releaseid=$($SCRIPTS/create_draft_release.sh "v$SQLITE_VERSION" "$BRANCH_NAME" "v$SQLITE_VERSION" "$body")
                echo "RELEASE_ID: $releaseid"
                echo "RELEASE_ID=$releaseid" >> $GITHUB_ENV
                
            - name: Upload assets
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              working-directory: assets
              run: |
                for file in *
                do
                    echo "Uploading $file..."
                    $SCRIPTS/upload_artifact.sh $RELEASE_ID "$file"
                done
                
            - name: Publish the release
              if: env.RELEASE_EXISTS == 'false'
              shell: bash
              working-directory: assets
              run: |
                $SCRIPTS/publish_release.sh $RELEASE_ID
